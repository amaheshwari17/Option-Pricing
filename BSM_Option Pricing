#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

@author: aayush

"""
#import necessary libraries
from scipy.stats import norm
from math import log, sqrt, exp


#define class
class BsmModel:
    def __init__(self, option_type, price, strike, interest_rate, expiry, volatility, dividend_yield):
        """
        Parameters
        ----------
        option_type : option type "p" put option "c" call option
        price : Underlying asset price
        strike : Option strike K
        interest_rate : Continuous risk fee rate
        expiry : time to expiry (year)
        volatility : Underlying volatility
        dividend_yield : Dividend continuous rate
        -------
        """
        
        self.s = price
        self.k = strike # 
        self.r = interest_rate # 
        self.q = dividend_yield # 
        self.T = expiry # 
        self.sigma = volatility # 
        self.type = option_type
        
        
    def n(self, d):
    # cumulative probability distribution function of standard normal distribution
        return norm.cdf(d)

    def dn(self, d):
    # the first order derivative of n(d); i.e. probability density function
        return norm.pdf(d)

    def d1(self):
    #calculation of d1
        d1 = (log(self.s / self.k) + (self.r - self.q + self.sigma ** 2 * 0.5) * self.T) / (self.sigma * sqrt(self.T))
        return d1

    # def d2(self):
    # #calculation of d2
    #     d2 = (log(self.s / self.k) + (self.r - self.q - self.sigma ** 2 * 0.5) * self.T) / (self.sigma * sqrt(self.T))
    #     return d2

    def bsm_price(self):
        d1 = self.d1()
        d2 = d1 - self.sigma * sqrt(self.T)
        if self.type == 'c':
            price = exp(-self.r*self.T) * (self.s * exp((self.r - self.q)*self.T) * self.n(d1) - self.k * self.n(d2))
            return price
        elif self.type == 'p':
            price = exp(-self.r*self.T) * (self.k * self.n(-d2) - (self.s * exp((self.r - self.q)*self.T) * self.n(-d1)))
            return price
        else:
            print ("option type can only be c or p")


a = BsmModel('c', 100, 110, 0.06, 90.0/365, 0.9, 0.01)
print(a.bsm_price())
